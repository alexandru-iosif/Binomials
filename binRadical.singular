LIB "standard.lib";
LIB "primdec.lib";

proc binRadical (ideal I) {
  // Todo: check if I is binomial ?
  if (I==0)
  {
    return(0);
  }
  if (I==1)
  {
    return(1); 
  }
  ideal varproduct = product(maxideal(1));
  ideal J = sat(I,varproduct-1)[1];
  // Initialize output ideal
  ideal out = J;
  ideal JJ;
  for (int i = 1; i<= nvars(basering); i++ ){
    // The reduced ideal
    JJ = std( J + var(i)); 
    // Compute the intersection of radical of 
    // the reduced ideal with what we already have
    out = intersect(out, binRadical(JJ) + var(i));
  }  
  return(std(J));
}

// To learn liste:
// How do we go to a subring where one variable is missing ?
// What is the meaning of the expression I.S, where S is a ring 
// Should we go to subrings everytime a variable is missing ?
