
// Interface library for communication between Singular and 4ti2 //
// Thomas Kahle , kahle@mis.mpg.de
// Anne Fruehbis-Krueger, anne@math.uni-hannover.de

proc markov4ti2(matrix A, list #)
{
//--------------------------------------------------------------------------
// Initialization and Sanity Checks
//--------------------------------------------------------------------------
   int i,j;
   int nr=nrows(A);
   int nc=ncols(A);
   string fileending="mat";
   if (size(#)!=0)
   {
   // default behaviour: use ker(A) as lattice, Ax=0
   // if #[1]!=0 use Im(A) as lattice, \{xA\}
      if(typeof(#[1])!="int")
      {
         ERROR("optional parameter needs to be integer value");\
      }
      if(#[1]!=0)
      {
         fileending="lat";
      }
   }
   if(fileending=="mat")
   {
      if(nvars(basering)!=ncols(A))
      {
          ERROR("number of columns needs to match number of variables");
      }
   }
   else
   {
      if(nvars(basering)!=nrows(A))
      {
          ERROR("number of rows needs to match number of variables");
      }
   }
//--------------------------------------------------------------------------
// preparing input file for 4ti2
//--------------------------------------------------------------------------
   link eing=":w sing4ti2."+fileending;
   string eingstring=string(nr)+" "+string(nc);
   write(eing,eingstring);
   for(i=1;i<=nr;i++)
   {
      kill eingstring;
      string eingstring;
      for(j=1;j<=nc;j++)
      {
          if(deg(A[i,j])>0)
          {
             ERROR("Input to markov4ti2 needs to be a matrix with integer entries");
          }
          eingstring=eingstring+string(A[i,j])+" ";
      }
      write(eing, eingstring);
   }
   close(eing);

//----------------------------------------------------------------------
// calling 4ti2 and converting output -- Singular's string handling sucks
//----------------------------------------------------------------------
   j=system("sh","markov sing4ti2");
   j=system("sh","awk \'BEGIN{ORS=\",\";}{print $0;}\' sing4ti2.mar | sed s/[\\\ \\\t\\\v\\\f]/,/g | sed s/,,/,/g > sing4ti2.converted"); 
//----------------------------------------------------------------------
// reading output of 4ti2
//----------------------------------------------------------------------
   link ausg=":r sing4ti2.converted";
   string ergstr="list erglist="+read(ausg)+ string(ideal(0))+";";
   execute(ergstr);
   ideal toric;
   poly temppol1,temppol2;
   for(i=1;i<=erglist[1];i++)
   {
     temppol1=1;
     temppol2=1;
     for(j=1;j<=erglist[2];j++)
     {
        if(erglist[2+(i-1)*erglist[2]+j]>=0)
        { 
           temppol1=temppol1*(var(j)^erglist[2+(i-1)*erglist[2]+j]);
        }
        else
        {
           temppol2=temppol2*(var(j)^(-erglist[2+(i-1)*erglist[2]+j]));
        }
     }
     toric=toric,temppol1-temppol2;  
   }
   toric=toric[2..ncols(toric)];
   return(toric);
}